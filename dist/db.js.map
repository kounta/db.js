{"version":3,"sources":["../src/db.js"],"names":["local","IDBKeyRange","webkitIDBKeyRange","transactionModes","readonly","readwrite","hasOwn","Object","prototype","hasOwnProperty","defaultMapper","x","indexedDB","webkitIndexedDB","mozIndexedDB","oIndexedDB","msIndexedDB","shimIndexedDB","Error","dbCache","serverEvents","isObject","item","mongoDBToKeyRangeArgs","opts","keys","sort","length","key","val","name","inclusive","TypeError","y","pattern","join","mongoifyKey","type","args","IndexQuery","table","db","indexName","preexistingError","modifyObj","runQuery","cursorType","direction","limitRange","filters","mapper","Promise","resolve","reject","keyRange","e","results","counter","indexArgs","transaction","onerror","onabort","oncomplete","store","objectStore","index","push","modifyKeys","modifyRecord","record","forEach","onsuccess","cursor","target","result","advance","matchFilter","value","filter","err","update","continue","Query","queuedError","unique","error","execute","count","desc","distinct","limit","map","start","end","some","modify","prop","fn","arguments","range","query","all","Server","version","noServerMethods","closed","getIndexedDB","isClosed","add","records","reduce","aip","concat","preventDefault","req","call","keyPath","source","defineProperty","enumerable","put","remove","delete","clear","close","get","addEventListener","eventName","handler","includes","h","removeEventListener","evName","objectStoreNames","storeName","createSchema","request","schema","server","i","deleteObjectStore","ret","tableName","contains","createObjectStore","indexes","indexKey","createIndex","err2","open","s","options","then","onupgradeneeded","onblocked","resume","res","rej","ev","dbName","deleteDatabase","newVersion","Proxy","oldVersion","cmp","param1","param2","module","exports","define","amd","self"],"mappings":"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","file":"db.js","sourcesContent":["(function (local) {\n    'use strict';\n\n    const IDBKeyRange = local.IDBKeyRange || local.webkitIDBKeyRange;\n    const transactionModes = {\n        readonly: 'readonly',\n        readwrite: 'readwrite'\n    };\n    const hasOwn = Object.prototype.hasOwnProperty;\n    const defaultMapper = x => x;\n\n    const indexedDB = local.indexedDB || local.webkitIndexedDB ||\n        local.mozIndexedDB || local.oIndexedDB || local.msIndexedDB ||\n        local.shimIndexedDB || (function () {\n            throw new Error('IndexedDB required');\n        }());\n\n    const dbCache = {};\n    const serverEvents = ['abort', 'error', 'versionchange'];\n\n    function isObject (item) {\n        return item && typeof item === 'object';\n    }\n\n    function mongoDBToKeyRangeArgs (opts) {\n        const keys = Object.keys(opts).sort();\n        if (keys.length === 1) {\n            const key = keys[0];\n            const val = opts[key];\n            let name, inclusive;\n            switch (key) {\n            case 'eq': name = 'only'; break;\n            case 'gt':\n                name = 'lowerBound';\n                inclusive = true;\n                break;\n            case 'lt':\n                name = 'upperBound';\n                inclusive = true;\n                break;\n            case 'gte': name = 'lowerBound'; break;\n            case 'lte': name = 'upperBound'; break;\n            default: throw new TypeError('`' + key + '` is not a valid key');\n            }\n            return [name, [val, inclusive]];\n        }\n        const x = opts[keys[0]];\n        const y = opts[keys[1]];\n        const pattern = keys.join('-');\n\n        switch (pattern) {\n        case 'gt-lt': case 'gt-lte': case 'gte-lt': case 'gte-lte':\n            return ['bound', [x, y, keys[0] === 'gt', keys[1] === 'lt']];\n        default: throw new TypeError(\n          '`' + pattern + '` are conflicted keys'\n        );\n        }\n    }\n    function mongoifyKey (key) {\n        if (key && typeof key === 'object' && !(key instanceof IDBKeyRange)) {\n            let [type, args] = mongoDBToKeyRangeArgs(key);\n            return IDBKeyRange[type](...args);\n        }\n        return key;\n    }\n\n    const IndexQuery = function (table, db, indexName, preexistingError) {\n        let modifyObj = null;\n\n        const runQuery = function (type, args, cursorType, direction, limitRange, filters, mapper) {\n            return new Promise(function (resolve, reject) {\n                let keyRange;\n                try {\n                    keyRange = type ? IDBKeyRange[type](...args) : null;\n                } catch (e) {\n                    reject(e);\n                    return;\n                }\n                filters = filters || [];\n                limitRange = limitRange || null;\n\n                let results = [];\n                let counter = 0;\n                const indexArgs = [keyRange];\n\n                const transaction = db.transaction(table, modifyObj ? transactionModes.readwrite : transactionModes.readonly);\n                transaction.onerror = e => reject(e);\n                transaction.onabort = e => reject(e);\n                transaction.oncomplete = () => resolve(results);\n\n                const store = transaction.objectStore(table); // if bad, db.transaction will reject first\n                const index = typeof indexName === 'string' ? store.index(indexName) : store;\n\n                if (cursorType !== 'count') {\n                    indexArgs.push(direction || 'next');\n                }\n\n                // Create a function that will set in the modifyObj properties into\n                // the passed record.\n                const modifyKeys = modifyObj ? Object.keys(modifyObj) : [];\n\n                const modifyRecord = function (record) {\n                    modifyKeys.forEach(key => {\n                        let val = modifyObj[key];\n                        if (typeof val === 'function') { val = val(record); }\n                        record[key] = val;\n                    });\n                    return record;\n                };\n\n                index[cursorType](...indexArgs).onsuccess = function (e) { // indexArgs are already validated\n                    const cursor = e.target.result;\n                    if (typeof cursor === 'number') {\n                        results = cursor;\n                    } else if (cursor) {\n                        if (limitRange !== null && limitRange[0] > counter) {\n                            counter = limitRange[0];\n                            cursor.advance(limitRange[0]); // Will throw on 0, but condition above prevents since counter always 0+\n                        } else if (limitRange !== null && counter >= (limitRange[0] + limitRange[1])) {\n                            // Out of limit range... skip\n                        } else {\n                            let matchFilter = true;\n                            let result = 'value' in cursor ? cursor.value : cursor.key;\n\n                            try {\n                                filters.forEach(function (filter) {\n                                    if (typeof filter[0] === 'function') {\n                                        matchFilter = matchFilter && filter[0](result);\n                                    } else {\n                                        matchFilter = matchFilter && (result[filter[0]] === filter[1]);\n                                    }\n                                });\n                            } catch (err) { // Could be filter on non-object or error in filter function\n                                reject(err);\n                                return;\n                            }\n\n                            if (matchFilter) {\n                                counter++;\n                                // If we're doing a modify, run it now\n                                if (modifyObj) {\n                                    try {\n                                        result = modifyRecord(result);\n                                        cursor.update(result); // `result` should only be a \"structured clone\"-able object\n                                    } catch (err) {\n                                        reject(err);\n                                        return;\n                                    }\n                                }\n                                try {\n                                    results.push(mapper(result));\n                                } catch (err) {\n                                    reject(err);\n                                    return;\n                                }\n                            }\n                            cursor.continue();\n                        }\n                    }\n                };\n            });\n        };\n\n        const Query = function (type, args, queuedError) {\n            const filters = [];\n            let direction = 'next';\n            let cursorType = 'openCursor';\n            let limitRange = null;\n            let mapper = defaultMapper;\n            let unique = false;\n            let error = preexistingError || queuedError;\n\n            const execute = function () {\n                if (error) {\n                    return Promise.reject(error);\n                }\n                return runQuery(type, args, cursorType, unique ? direction + 'unique' : direction, limitRange, filters, mapper);\n            };\n\n            const count = function () {\n                direction = null;\n                cursorType = 'count';\n\n                return {\n                    execute\n                };\n            };\n\n            const keys = function () {\n                cursorType = 'openKeyCursor';\n\n                return {\n                    desc,\n                    distinct,\n                    execute,\n                    filter,\n                    limit,\n                    map\n                };\n            };\n\n            const limit = function (start, end) {\n                limitRange = !end ? [0, start] : [start, end];\n                error = limitRange.some(val => typeof val !== 'number') ? new Error('limit() arguments must be numeric') : error;\n\n                return {\n                    desc,\n                    distinct,\n                    filter,\n                    keys,\n                    execute,\n                    map,\n                    modify\n                };\n            };\n\n            const filter = function (prop, val) {\n                filters.push([prop, val]);\n\n                return {\n                    desc,\n                    distinct,\n                    execute,\n                    filter,\n                    keys,\n                    limit,\n                    map,\n                    modify\n                };\n            };\n\n            const desc = function () {\n                direction = 'prev';\n\n                return {\n                    distinct,\n                    execute,\n                    filter,\n                    keys,\n                    limit,\n                    map,\n                    modify\n                };\n            };\n\n            const distinct = function () {\n                unique = true;\n                return {\n                    count,\n                    desc,\n                    execute,\n                    filter,\n                    keys,\n                    limit,\n                    map,\n                    modify\n                };\n            };\n\n            const modify = function (update) {\n                modifyObj = update && typeof update === 'object' ? update : null;\n                return {\n                    execute\n                };\n            };\n\n            const map = function (fn) {\n                mapper = fn;\n\n                return {\n                    count,\n                    desc,\n                    distinct,\n                    execute,\n                    filter,\n                    keys,\n                    limit,\n                    modify\n                };\n            };\n\n            return {\n                count,\n                desc,\n                distinct,\n                execute,\n                filter,\n                keys,\n                limit,\n                map,\n                modify\n            };\n        };\n\n        ['only', 'bound', 'upperBound', 'lowerBound'].forEach((name) => {\n            this[name] = function () {\n                return Query(name, arguments);\n            };\n        });\n\n        this.range = function (opts) {\n            let error;\n            let keyRange = [null, null];\n            try {\n                keyRange = mongoDBToKeyRangeArgs(opts);\n            } catch (e) {\n                error = e;\n            }\n            return Query(...keyRange, error);\n        };\n\n        this.filter = function (...args) {\n            const query = Query(null, null);\n            return query.filter(...args);\n        };\n\n        this.all = function () {\n            return this.filter();\n        };\n    };\n\n    const Server = function (db, name, version, noServerMethods) {\n        let closed = false;\n\n        this.getIndexedDB = () => db;\n        this.isClosed = () => closed;\n\n        this.query = function (table, index) {\n            const error = closed ? new Error('Database has been closed') : null;\n            return new IndexQuery(table, db, index, error); // Does not throw by itself\n        };\n\n        this.add = function (table, ...args) {\n            return new Promise(function (resolve, reject) {\n                if (closed) {\n                    reject(new Error('Database has been closed'));\n                    return;\n                }\n\n                const records = args.reduce(function (records, aip) {\n                    return records.concat(aip);\n                }, []);\n\n                const transaction = db.transaction(table, transactionModes.readwrite);\n                transaction.onerror = e => {\n                    // prevent throwing a ConstraintError and aborting (hard)\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=872873\n                    e.preventDefault();\n                    reject(e);\n                };\n                transaction.onabort = e => reject(e);\n                transaction.oncomplete = () => resolve(records);\n\n                const store = transaction.objectStore(table);\n                records.some(function (record) {\n                    let req, key;\n                    if (isObject(record) && hasOwn.call(record, 'item')) {\n                        key = record.key;\n                        record = record.item;\n                        if (key != null) {\n                            try {\n                                key = mongoifyKey(key);\n                            } catch (e) {\n                                reject(e);\n                                return true;\n                            }\n                        }\n                    }\n\n                    try {\n                        // Safe to add since in readwrite\n                        if (key != null) {\n                            req = store.add(record, key);\n                        } else {\n                            req = store.add(record);\n                        }\n                    } catch (e) {\n                        reject(e);\n                        return true;\n                    }\n\n                    req.onsuccess = function (e) {\n                        if (!isObject(record)) {\n                            return;\n                        }\n                        const target = e.target;\n                        let keyPath = target.source.keyPath;\n                        if (keyPath === null) {\n                            keyPath = '__id__';\n                        }\n                        if (hasOwn.call(record, keyPath)) {\n                            return;\n                        }\n                        Object.defineProperty(record, keyPath, {\n                            value: target.result,\n                            enumerable: true\n                        });\n                    };\n                });\n            });\n        };\n\n        this.update = function (table, ...args) {\n            return new Promise(function (resolve, reject) {\n                if (closed) {\n                    reject(new Error('Database has been closed'));\n                    return;\n                }\n\n                const records = args.reduce(function (records, aip) {\n                    return records.concat(aip);\n                }, []);\n\n                const transaction = db.transaction(table, transactionModes.readwrite);\n                transaction.onerror = e => {\n                    // prevent throwing aborting (hard)\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=872873\n                    e.preventDefault();\n                    reject(e);\n                };\n                transaction.onabort = e => reject(e);\n                transaction.oncomplete = () => resolve(records);\n\n                const store = transaction.objectStore(table);\n\n                records.some(function (record) {\n                    let req, key;\n                    if (isObject(record) && hasOwn.call(record, 'item')) {\n                        key = record.key;\n                        record = record.item;\n                        if (key != null) {\n                            try {\n                                key = mongoifyKey(key);\n                            } catch (e) {\n                                reject(e);\n                                return true;\n                            }\n                        }\n                    }\n                    try {\n                        // These can throw DataError, e.g., if function passed in\n                        if (key != null) {\n                            req = store.put(record, key);\n                        } else {\n                            req = store.put(record);\n                        }\n                    } catch (err) {\n                        reject(err);\n                        return true;\n                    }\n\n                    req.onsuccess = function (e) {\n                        if (!isObject(record)) {\n                            return;\n                        }\n                        const target = e.target;\n                        let keyPath = target.source.keyPath;\n                        if (keyPath === null) {\n                            keyPath = '__id__';\n                        }\n                        if (hasOwn.call(record, keyPath)) {\n                            return;\n                        }\n                        Object.defineProperty(record, keyPath, {\n                            value: target.result,\n                            enumerable: true\n                        });\n                    };\n                });\n            });\n        };\n\n        this.put = function (...args) {\n            return this.update(...args);\n        };\n\n        this.remove = function (table, key) {\n            return new Promise(function (resolve, reject) {\n                if (closed) {\n                    reject(new Error('Database has been closed'));\n                    return;\n                }\n                try {\n                    key = mongoifyKey(key);\n                } catch (e) {\n                    reject(e);\n                    return;\n                }\n\n                const transaction = db.transaction(table, transactionModes.readwrite);\n                transaction.onerror = e => {\n                    // prevent throwing and aborting (hard)\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=872873\n                    e.preventDefault();\n                    reject(e);\n                };\n                transaction.onabort = e => reject(e);\n                transaction.oncomplete = () => resolve(key);\n\n                const store = transaction.objectStore(table);\n                try {\n                    store.delete(key);\n                } catch (err) {\n                    reject(err);\n                }\n            });\n        };\n\n        this.delete = function (...args) {\n            return this.remove(...args);\n        };\n\n        this.clear = function (table) {\n            return new Promise(function (resolve, reject) {\n                if (closed) {\n                    reject(new Error('Database has been closed'));\n                    return;\n                }\n                const transaction = db.transaction(table, transactionModes.readwrite);\n                transaction.onerror = e => reject(e);\n                transaction.onabort = e => reject(e);\n                transaction.oncomplete = () => resolve();\n\n                const store = transaction.objectStore(table);\n                store.clear();\n            });\n        };\n\n        this.close = function () {\n            return new Promise(function (resolve, reject) {\n                if (closed) {\n                    reject(new Error('Database has been closed'));\n                    return;\n                }\n                db.close();\n                closed = true;\n                delete dbCache[name][version];\n                resolve();\n            });\n        };\n\n        this.get = function (table, key) {\n            return new Promise(function (resolve, reject) {\n                if (closed) {\n                    reject(new Error('Database has been closed'));\n                    return;\n                }\n                try {\n                    key = mongoifyKey(key);\n                } catch (e) {\n                    reject(e);\n                    return;\n                }\n\n                const transaction = db.transaction(table);\n                transaction.onerror = e => {\n                    // prevent throwing and aborting (hard)\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=872873\n                    e.preventDefault();\n                    reject(e);\n                };\n                transaction.onabort = e => reject(e);\n\n                const store = transaction.objectStore(table);\n\n                let req;\n                try {\n                    req = store.get(key);\n                } catch (err) {\n                    reject(err);\n                }\n                req.onsuccess = e => resolve(e.target.result);\n            });\n        };\n\n        this.count = function (table, key) {\n            return new Promise((resolve, reject) => {\n                if (closed) {\n                    reject(new Error('Database has been closed'));\n                    return;\n                }\n                try {\n                    key = mongoifyKey(key);\n                } catch (e) {\n                    reject(e);\n                    return;\n                }\n\n                const transaction = db.transaction(table);\n                transaction.onerror = e => {\n                    // prevent throwing and aborting (hard)\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=872873\n                    e.preventDefault();\n                    reject(e);\n                };\n                transaction.onabort = e => reject(e);\n\n                const store = transaction.objectStore(table);\n                let req;\n                try {\n                    req = key == null ? store.count() : store.count(key);\n                } catch (err) {\n                    reject(err);\n                }\n                req.onsuccess = e => resolve(e.target.result);\n            });\n        };\n\n        this.addEventListener = function (eventName, handler) {\n            if (!serverEvents.includes(eventName)) {\n                throw new Error('Unrecognized event type ' + eventName);\n            }\n            if (eventName === 'error') {\n                var h = function (e) {\n                    e.preventDefault(); // Needed by Firefox to prevent hard abort with ConstraintError\n                    handler(e);\n                };\n                // On Safari of iOS 8.* or 9.*, IDBDatabase doesn't have the method: addEventListener\n                if (db.addEventListener) {\n                    db.addEventListener(eventName, h);\n                } else {\n                    db['on' + eventName] = h;\n                }\n                return;\n            }\n            // On Safari of iOS 8.* or 9.*, IDBDatabase doesn't have the method: addEventListener\n            if (db.addEventListener) {\n                db.addEventListener(eventName, handler);\n            } else {\n                db['on' + eventName] = handler;\n            }\n        };\n\n        this.removeEventListener = function (eventName, handler) {\n            if (!serverEvents.includes(eventName)) {\n                throw new Error('Unrecognized event type ' + eventName);\n            }\n            // On Safari of iOS 8.* or 9.*, IDBDatabase doesn't have the method: removeEventListener\n            if (db.removeEventListener) {\n                db.removeEventListener(eventName, handler);\n            } else {\n                db['on' + eventName] = null;\n            }\n        };\n\n        serverEvents.forEach(function (evName) {\n            this[evName] = function (handler) {\n                this.addEventListener(evName, handler);\n                return this;\n            };\n        }, this);\n\n        if (noServerMethods) {\n            return;\n        }\n\n        let err;\n        [].some.call(db.objectStoreNames, storeName => {\n            if (this[storeName]) {\n                err = new Error('The store name, \"' + storeName + '\", which you have attempted to load, conflicts with db.js method names.\"');\n                this.close();\n                return true;\n            }\n            this[storeName] = {};\n            const keys = Object.keys(this);\n            keys.filter(key => !(([...serverEvents, 'close', 'addEventListener', 'removeEventListener']).includes(key)))\n                .map(key =>\n                    this[storeName][key] = (...args) => this[key](storeName, ...args)\n                );\n        });\n        return err;\n    };\n\n    const createSchema = function (e, request, schema, db, server, version) {\n        if (!schema || schema.length === 0) {\n            return;\n        }\n\n        for (let i = 0; i < db.objectStoreNames.length; i++) {\n            const name = db.objectStoreNames[i];\n            if (!hasOwn.call(schema, name)) {\n                // Errors for which we are not concerned and why:\n                // `InvalidStateError` - We are in the upgrade transaction.\n                // `TransactionInactiveError` (as by the upgrade having already\n                //      completed or somehow aborting) - since we've just started and\n                //      should be without risk in this loop\n                // `NotFoundError` - since we are iterating the dynamically updated\n                //      `objectStoreNames`\n                db.deleteObjectStore(name);\n            }\n        }\n\n        let ret;\n        Object.keys(schema).some(function (tableName) {\n            const table = schema[tableName];\n            let store;\n            if (db.objectStoreNames.contains(tableName)) {\n                store = request.transaction.objectStore(tableName); // Shouldn't throw\n            } else {\n                // Errors for which we are not concerned and why:\n                // `InvalidStateError` - We are in the upgrade transaction.\n                // `ConstraintError` - We are just starting (and probably never too large anyways) for a key generator.\n                // `ConstraintError` - The above condition should prevent the name already existing.\n                //\n                // Possible errors:\n                // `TransactionInactiveError` - if the upgrade had already aborted,\n                //      e.g., from a previous `QuotaExceededError` which is supposed to nevertheless return\n                //      the store but then abort the transaction.\n                // `SyntaxError` - if an invalid `table.key.keyPath` is supplied.\n                // `InvalidAccessError` - if `table.key.autoIncrement` is `true` and `table.key.keyPath` is an\n                //      empty string or any sequence (empty or otherwise).\n                try {\n                    store = db.createObjectStore(tableName, table.key);\n                } catch (err) {\n                    ret = err;\n                    return true;\n                }\n            }\n\n            Object.keys(table.indexes || {}).some(function (indexKey) {\n                try {\n                    store.index(indexKey);\n                } catch (err) {\n                    let index = table.indexes[indexKey];\n                    index = index && typeof index === 'object' ? index : {};\n                    // Errors for which we are not concerned and why:\n                    // `InvalidStateError` - We are in the upgrade transaction and store found above should not have already been deleted.\n                    // `ConstraintError` - We have already tried getting the index, so it shouldn't already exist\n                    //\n                    // Possible errors:\n                    // `TransactionInactiveError` - if the upgrade had already aborted,\n                    //      e.g., from a previous `QuotaExceededError` which is supposed to nevertheless return\n                    //      the index object but then abort the transaction.\n                    // `SyntaxError` - If the `keyPath` (second argument) is an invalid key path\n                    // `InvalidAccessError` - If `multiEntry` on `index` is `true` and\n                    //                          `keyPath` (second argument) is a sequence\n                    try {\n                        store.createIndex(indexKey, index.keyPath || index.key || indexKey, index);\n                    } catch (err2) {\n                        ret = err2;\n                        return true;\n                    }\n                }\n            });\n        });\n        return ret;\n    };\n\n    const open = function (e, server, version, noServerMethods) {\n        const db = e.target.result;\n        dbCache[server][version] = db;\n\n        const s = new Server(db, server, version, noServerMethods);\n        return s instanceof Error ? Promise.reject(s) : Promise.resolve(s);\n    };\n\n    const db = {\n        version: '0.15.0',\n        open: function (options) {\n            let server = options.server;\n            let version = options.version || 1;\n            let schema = options.schema;\n            let noServerMethods = options.noServerMethods;\n\n            if (!dbCache[server]) {\n                dbCache[server] = {};\n            }\n            return new Promise(function (resolve, reject) {\n                if (dbCache[server][version]) {\n                    open({\n                        target: {\n                            result: dbCache[server][version]\n                        }\n                    }, server, version, noServerMethods)\n                    .then(resolve, reject);\n                } else {\n                    if (typeof schema === 'function') {\n                        try {\n                            schema = schema();\n                        } catch (e) {\n                            reject(e);\n                            return;\n                        }\n                    }\n                    const request = indexedDB.open(server, version);\n\n                    request.onsuccess = e => open(e, server, version, noServerMethods).then(resolve, reject);\n                    request.onerror = e => {\n                        // Prevent default for `BadVersion` and `AbortError` errors, etc.\n                        // These are not necessarily reported in console in Chrome but present; see\n                        //  https://bugzilla.mozilla.org/show_bug.cgi?id=872873\n                        //  http://stackoverflow.com/questions/36225779/aborterror-within-indexeddb-upgradeneeded-event/36266502\n                        e.preventDefault();\n                        reject(e);\n                    };\n                    request.onupgradeneeded = e => {\n                        let err = createSchema(e, request, schema, e.target.result, server, version);\n                        if (err) {\n                            reject(err);\n                        }\n                    };\n                    request.onblocked = e => {\n                        const resume = new Promise(function (res, rej) {\n                            // We overwrite handlers rather than make a new\n                            //   open() since the original request is still\n                            //   open and its onsuccess will still fire if\n                            //   the user unblocks by closing the blocking\n                            //   connection\n                            request.onsuccess = (ev) => {\n                                open(ev, server, version, noServerMethods)\n                                    .then(res, rej);\n                            };\n                            request.onerror = e => rej(e);\n                        });\n                        e.resume = resume;\n                        reject(e);\n                    };\n                }\n            });\n        },\n\n        delete: function (dbName) {\n            return new Promise(function (resolve, reject) {\n                const request = indexedDB.deleteDatabase(dbName); // Does not throw\n\n                request.onsuccess = e => resolve(e);\n                request.onerror = e => reject(e); // No errors currently\n                request.onblocked = e => {\n                    // The following addresses part of https://bugzilla.mozilla.org/show_bug.cgi?id=1220279\n                    e = e.newVersion === null || typeof Proxy === 'undefined' ? e : new Proxy(e, {get: function (target, name) {\n                        return name === 'newVersion' ? null : target[name];\n                    }});\n                    const resume = new Promise(function (res, rej) {\n                        // We overwrite handlers rather than make a new\n                        //   delete() since the original request is still\n                        //   open and its onsuccess will still fire if\n                        //   the user unblocks by closing the blocking\n                        //   connection\n                        request.onsuccess = ev => {\n                            // The following are needed currently by PhantomJS: https://github.com/ariya/phantomjs/issues/14141\n                            if (!('newVersion' in ev)) {\n                                ev.newVersion = e.newVersion;\n                            }\n\n                            if (!('oldVersion' in ev)) {\n                                ev.oldVersion = e.oldVersion;\n                            }\n\n                            res(ev);\n                        };\n                        request.onerror = e => rej(e);\n                    });\n                    e.resume = resume;\n                    reject(e);\n                };\n            });\n        },\n\n        cmp: function (param1, param2) {\n            return new Promise(function (resolve, reject) {\n                try {\n                    resolve(indexedDB.cmp(param1, param2));\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        }\n    };\n\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        module.exports = db;\n    } else if (typeof define === 'function' && define.amd) {\n        define(function () { return db; });\n    } else {\n        local.db = db;\n    }\n}(self));\n"]}